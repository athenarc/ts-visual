package eu.more2020.visual.domain.GrpcAutoGenerated;

import static io.grpc.MethodDescriptor.generateFullMethodName;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler (version 1.58.0)",
    comments = "Source: forecasting.proto")
@io.grpc.stub.annotations.GrpcGenerated
public final class RouteGuideGrpc {

  private RouteGuideGrpc() {}

  public static final java.lang.String SERVICE_NAME = "RouteGuide";

  // Static method descriptors that strictly reflect the proto.
  private static volatile io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo,
      eu.more2020.visual.domain.GrpcAutoGenerated.Status> getStartTrainingMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "StartTraining",
      requestType = eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo.class,
      responseType = eu.more2020.visual.domain.GrpcAutoGenerated.Status.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo,
      eu.more2020.visual.domain.GrpcAutoGenerated.Status> getStartTrainingMethod() {
    io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo, eu.more2020.visual.domain.GrpcAutoGenerated.Status> getStartTrainingMethod;
    if ((getStartTrainingMethod = RouteGuideGrpc.getStartTrainingMethod) == null) {
      synchronized (RouteGuideGrpc.class) {
        if ((getStartTrainingMethod = RouteGuideGrpc.getStartTrainingMethod) == null) {
          RouteGuideGrpc.getStartTrainingMethod = getStartTrainingMethod =
              io.grpc.MethodDescriptor.<eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo, eu.more2020.visual.domain.GrpcAutoGenerated.Status>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "StartTraining"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.Status.getDefaultInstance()))
              .setSchemaDescriptor(new RouteGuideMethodDescriptorSupplier("StartTraining"))
              .build();
        }
      }
    }
    return getStartTrainingMethod;
  }

  private static volatile io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.JobID,
      eu.more2020.visual.domain.GrpcAutoGenerated.Progress> getGetProgressMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetProgress",
      requestType = eu.more2020.visual.domain.GrpcAutoGenerated.JobID.class,
      responseType = eu.more2020.visual.domain.GrpcAutoGenerated.Progress.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.JobID,
      eu.more2020.visual.domain.GrpcAutoGenerated.Progress> getGetProgressMethod() {
    io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.JobID, eu.more2020.visual.domain.GrpcAutoGenerated.Progress> getGetProgressMethod;
    if ((getGetProgressMethod = RouteGuideGrpc.getGetProgressMethod) == null) {
      synchronized (RouteGuideGrpc.class) {
        if ((getGetProgressMethod = RouteGuideGrpc.getGetProgressMethod) == null) {
          RouteGuideGrpc.getGetProgressMethod = getGetProgressMethod =
              io.grpc.MethodDescriptor.<eu.more2020.visual.domain.GrpcAutoGenerated.JobID, eu.more2020.visual.domain.GrpcAutoGenerated.Progress>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetProgress"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.JobID.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.Progress.getDefaultInstance()))
              .setSchemaDescriptor(new RouteGuideMethodDescriptorSupplier("GetProgress"))
              .build();
        }
      }
    }
    return getGetProgressMethod;
  }

  private static volatile io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.Target,
      eu.more2020.visual.domain.GrpcAutoGenerated.Results> getGetSpecificTargetResultsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetSpecificTargetResults",
      requestType = eu.more2020.visual.domain.GrpcAutoGenerated.Target.class,
      responseType = eu.more2020.visual.domain.GrpcAutoGenerated.Results.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.Target,
      eu.more2020.visual.domain.GrpcAutoGenerated.Results> getGetSpecificTargetResultsMethod() {
    io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.Target, eu.more2020.visual.domain.GrpcAutoGenerated.Results> getGetSpecificTargetResultsMethod;
    if ((getGetSpecificTargetResultsMethod = RouteGuideGrpc.getGetSpecificTargetResultsMethod) == null) {
      synchronized (RouteGuideGrpc.class) {
        if ((getGetSpecificTargetResultsMethod = RouteGuideGrpc.getGetSpecificTargetResultsMethod) == null) {
          RouteGuideGrpc.getGetSpecificTargetResultsMethod = getGetSpecificTargetResultsMethod =
              io.grpc.MethodDescriptor.<eu.more2020.visual.domain.GrpcAutoGenerated.Target, eu.more2020.visual.domain.GrpcAutoGenerated.Results>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetSpecificTargetResults"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.Target.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.Results.getDefaultInstance()))
              .setSchemaDescriptor(new RouteGuideMethodDescriptorSupplier("GetSpecificTargetResults"))
              .build();
        }
      }
    }
    return getGetSpecificTargetResultsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.JobID,
      eu.more2020.visual.domain.GrpcAutoGenerated.AllResults> getGetAllTargetsResultsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetAllTargetsResults",
      requestType = eu.more2020.visual.domain.GrpcAutoGenerated.JobID.class,
      responseType = eu.more2020.visual.domain.GrpcAutoGenerated.AllResults.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.JobID,
      eu.more2020.visual.domain.GrpcAutoGenerated.AllResults> getGetAllTargetsResultsMethod() {
    io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.JobID, eu.more2020.visual.domain.GrpcAutoGenerated.AllResults> getGetAllTargetsResultsMethod;
    if ((getGetAllTargetsResultsMethod = RouteGuideGrpc.getGetAllTargetsResultsMethod) == null) {
      synchronized (RouteGuideGrpc.class) {
        if ((getGetAllTargetsResultsMethod = RouteGuideGrpc.getGetAllTargetsResultsMethod) == null) {
          RouteGuideGrpc.getGetAllTargetsResultsMethod = getGetAllTargetsResultsMethod =
              io.grpc.MethodDescriptor.<eu.more2020.visual.domain.GrpcAutoGenerated.JobID, eu.more2020.visual.domain.GrpcAutoGenerated.AllResults>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetAllTargetsResults"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.JobID.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.AllResults.getDefaultInstance()))
              .setSchemaDescriptor(new RouteGuideMethodDescriptorSupplier("GetAllTargetsResults"))
              .build();
        }
      }
    }
    return getGetAllTargetsResultsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp,
      eu.more2020.visual.domain.GrpcAutoGenerated.Inference> getGetInferenceMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetInference",
      requestType = eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp.class,
      responseType = eu.more2020.visual.domain.GrpcAutoGenerated.Inference.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp,
      eu.more2020.visual.domain.GrpcAutoGenerated.Inference> getGetInferenceMethod() {
    io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp, eu.more2020.visual.domain.GrpcAutoGenerated.Inference> getGetInferenceMethod;
    if ((getGetInferenceMethod = RouteGuideGrpc.getGetInferenceMethod) == null) {
      synchronized (RouteGuideGrpc.class) {
        if ((getGetInferenceMethod = RouteGuideGrpc.getGetInferenceMethod) == null) {
          RouteGuideGrpc.getGetInferenceMethod = getGetInferenceMethod =
              io.grpc.MethodDescriptor.<eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp, eu.more2020.visual.domain.GrpcAutoGenerated.Inference>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetInference"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.Inference.getDefaultInstance()))
              .setSchemaDescriptor(new RouteGuideMethodDescriptorSupplier("GetInference"))
              .build();
        }
      }
    }
    return getGetInferenceMethod;
  }

  private static volatile io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo,
      eu.more2020.visual.domain.GrpcAutoGenerated.Status> getSaveModelMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "SaveModel",
      requestType = eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo.class,
      responseType = eu.more2020.visual.domain.GrpcAutoGenerated.Status.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo,
      eu.more2020.visual.domain.GrpcAutoGenerated.Status> getSaveModelMethod() {
    io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo, eu.more2020.visual.domain.GrpcAutoGenerated.Status> getSaveModelMethod;
    if ((getSaveModelMethod = RouteGuideGrpc.getSaveModelMethod) == null) {
      synchronized (RouteGuideGrpc.class) {
        if ((getSaveModelMethod = RouteGuideGrpc.getSaveModelMethod) == null) {
          RouteGuideGrpc.getSaveModelMethod = getSaveModelMethod =
              io.grpc.MethodDescriptor.<eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo, eu.more2020.visual.domain.GrpcAutoGenerated.Status>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "SaveModel"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.Status.getDefaultInstance()))
              .setSchemaDescriptor(new RouteGuideMethodDescriptorSupplier("SaveModel"))
              .build();
        }
      }
    }
    return getSaveModelMethod;
  }

  private static volatile io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest,
      eu.more2020.visual.domain.GrpcAutoGenerated.Models> getGetModelsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetModels",
      requestType = eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest.class,
      responseType = eu.more2020.visual.domain.GrpcAutoGenerated.Models.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest,
      eu.more2020.visual.domain.GrpcAutoGenerated.Models> getGetModelsMethod() {
    io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest, eu.more2020.visual.domain.GrpcAutoGenerated.Models> getGetModelsMethod;
    if ((getGetModelsMethod = RouteGuideGrpc.getGetModelsMethod) == null) {
      synchronized (RouteGuideGrpc.class) {
        if ((getGetModelsMethod = RouteGuideGrpc.getGetModelsMethod) == null) {
          RouteGuideGrpc.getGetModelsMethod = getGetModelsMethod =
              io.grpc.MethodDescriptor.<eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest, eu.more2020.visual.domain.GrpcAutoGenerated.Models>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetModels"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.Models.getDefaultInstance()))
              .setSchemaDescriptor(new RouteGuideMethodDescriptorSupplier("GetModels"))
              .build();
        }
      }
    }
    return getGetModelsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.ModelName,
      eu.more2020.visual.domain.GrpcAutoGenerated.Models> getDeleteModelMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteModel",
      requestType = eu.more2020.visual.domain.GrpcAutoGenerated.ModelName.class,
      responseType = eu.more2020.visual.domain.GrpcAutoGenerated.Models.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.ModelName,
      eu.more2020.visual.domain.GrpcAutoGenerated.Models> getDeleteModelMethod() {
    io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.ModelName, eu.more2020.visual.domain.GrpcAutoGenerated.Models> getDeleteModelMethod;
    if ((getDeleteModelMethod = RouteGuideGrpc.getDeleteModelMethod) == null) {
      synchronized (RouteGuideGrpc.class) {
        if ((getDeleteModelMethod = RouteGuideGrpc.getDeleteModelMethod) == null) {
          RouteGuideGrpc.getDeleteModelMethod = getDeleteModelMethod =
              io.grpc.MethodDescriptor.<eu.more2020.visual.domain.GrpcAutoGenerated.ModelName, eu.more2020.visual.domain.GrpcAutoGenerated.Models>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteModel"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.ModelName.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.Models.getDefaultInstance()))
              .setSchemaDescriptor(new RouteGuideMethodDescriptorSupplier("DeleteModel"))
              .build();
        }
      }
    }
    return getDeleteModelMethod;
  }

  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static RouteGuideStub newStub(io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<RouteGuideStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<RouteGuideStub>() {
        @java.lang.Override
        public RouteGuideStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new RouteGuideStub(channel, callOptions);
        }
      };
    return RouteGuideStub.newStub(factory, channel);
  }

  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static RouteGuideBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<RouteGuideBlockingStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<RouteGuideBlockingStub>() {
        @java.lang.Override
        public RouteGuideBlockingStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new RouteGuideBlockingStub(channel, callOptions);
        }
      };
    return RouteGuideBlockingStub.newStub(factory, channel);
  }

  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static RouteGuideFutureStub newFutureStub(
      io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<RouteGuideFutureStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<RouteGuideFutureStub>() {
        @java.lang.Override
        public RouteGuideFutureStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new RouteGuideFutureStub(channel, callOptions);
        }
      };
    return RouteGuideFutureStub.newStub(factory, channel);
  }

  /**
   */
  public interface AsyncService {

    /**
     * <pre>
     * Start training a model
     * Return: Start of training job
     * </pre>
     */
    default void startTraining(eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Status> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getStartTrainingMethod(), responseObserver);
    }

    /**
     * <pre>
     * Get progress for a specific job 
     * Return: If the job is running, if it is done, or if it has not started yet
     * </pre>
     */
    default void getProgress(eu.more2020.visual.domain.GrpcAutoGenerated.JobID request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Progress> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetProgressMethod(), responseObserver);
    }

    /**
     * <pre>
     * Get results for a specific target of a job
     * Return: Model evaluation metrics and predictions for the selected target
     * </pre>
     */
    default void getSpecificTargetResults(eu.more2020.visual.domain.GrpcAutoGenerated.Target request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Results> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetSpecificTargetResultsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Get results for all targets of a job
     * Return: Model evaluation metrics and predictions for all targets
     * </pre>
     */
    default void getAllTargetsResults(eu.more2020.visual.domain.GrpcAutoGenerated.JobID request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.AllResults> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetAllTargetsResultsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Get inference for a specific timestamp and model
     * Return: Predictions for a specific timestamp
     * </pre>
     */
    default void getInference(eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Inference> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetInferenceMethod(), responseObserver);
    }

    /**
     * <pre>
     * Save the desired model given the algorithm and the target
     * Return: If information was saved successfully
     * </pre>
     */
    default void saveModel(eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Status> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getSaveModelMethod(), responseObserver);
    }

    /**
     * <pre>
     * Empty request
     * Return: list of strings with the names of the saved models
     * </pre>
     */
    default void getModels(eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Models> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetModelsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Perform a deletion of a saved model based on the model name
     * Return List of available models after deletion
     * </pre>
     */
    default void deleteModel(eu.more2020.visual.domain.GrpcAutoGenerated.ModelName request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Models> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteModelMethod(), responseObserver);
    }
  }

  /**
   * Base class for the server implementation of the service RouteGuide.
   */
  public static abstract class RouteGuideImplBase
      implements io.grpc.BindableService, AsyncService {

    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return RouteGuideGrpc.bindService(this);
    }
  }

  /**
   * A stub to allow clients to do asynchronous rpc calls to service RouteGuide.
   */
  public static final class RouteGuideStub
      extends io.grpc.stub.AbstractAsyncStub<RouteGuideStub> {
    private RouteGuideStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected RouteGuideStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new RouteGuideStub(channel, callOptions);
    }

    /**
     * <pre>
     * Start training a model
     * Return: Start of training job
     * </pre>
     */
    public void startTraining(eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Status> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getStartTrainingMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Get progress for a specific job 
     * Return: If the job is running, if it is done, or if it has not started yet
     * </pre>
     */
    public void getProgress(eu.more2020.visual.domain.GrpcAutoGenerated.JobID request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Progress> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetProgressMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Get results for a specific target of a job
     * Return: Model evaluation metrics and predictions for the selected target
     * </pre>
     */
    public void getSpecificTargetResults(eu.more2020.visual.domain.GrpcAutoGenerated.Target request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Results> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetSpecificTargetResultsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Get results for all targets of a job
     * Return: Model evaluation metrics and predictions for all targets
     * </pre>
     */
    public void getAllTargetsResults(eu.more2020.visual.domain.GrpcAutoGenerated.JobID request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.AllResults> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetAllTargetsResultsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Get inference for a specific timestamp and model
     * Return: Predictions for a specific timestamp
     * </pre>
     */
    public void getInference(eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Inference> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetInferenceMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Save the desired model given the algorithm and the target
     * Return: If information was saved successfully
     * </pre>
     */
    public void saveModel(eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Status> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getSaveModelMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Empty request
     * Return: list of strings with the names of the saved models
     * </pre>
     */
    public void getModels(eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Models> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetModelsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Perform a deletion of a saved model based on the model name
     * Return List of available models after deletion
     * </pre>
     */
    public void deleteModel(eu.more2020.visual.domain.GrpcAutoGenerated.ModelName request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Models> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteModelMethod(), getCallOptions()), request, responseObserver);
    }
  }

  /**
   * A stub to allow clients to do synchronous rpc calls to service RouteGuide.
   */
  public static final class RouteGuideBlockingStub
      extends io.grpc.stub.AbstractBlockingStub<RouteGuideBlockingStub> {
    private RouteGuideBlockingStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected RouteGuideBlockingStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new RouteGuideBlockingStub(channel, callOptions);
    }

    /**
     * <pre>
     * Start training a model
     * Return: Start of training job
     * </pre>
     */
    public eu.more2020.visual.domain.GrpcAutoGenerated.Status startTraining(eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getStartTrainingMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Get progress for a specific job 
     * Return: If the job is running, if it is done, or if it has not started yet
     * </pre>
     */
    public eu.more2020.visual.domain.GrpcAutoGenerated.Progress getProgress(eu.more2020.visual.domain.GrpcAutoGenerated.JobID request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetProgressMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Get results for a specific target of a job
     * Return: Model evaluation metrics and predictions for the selected target
     * </pre>
     */
    public eu.more2020.visual.domain.GrpcAutoGenerated.Results getSpecificTargetResults(eu.more2020.visual.domain.GrpcAutoGenerated.Target request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetSpecificTargetResultsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Get results for all targets of a job
     * Return: Model evaluation metrics and predictions for all targets
     * </pre>
     */
    public eu.more2020.visual.domain.GrpcAutoGenerated.AllResults getAllTargetsResults(eu.more2020.visual.domain.GrpcAutoGenerated.JobID request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetAllTargetsResultsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Get inference for a specific timestamp and model
     * Return: Predictions for a specific timestamp
     * </pre>
     */
    public eu.more2020.visual.domain.GrpcAutoGenerated.Inference getInference(eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetInferenceMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Save the desired model given the algorithm and the target
     * Return: If information was saved successfully
     * </pre>
     */
    public eu.more2020.visual.domain.GrpcAutoGenerated.Status saveModel(eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getSaveModelMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Empty request
     * Return: list of strings with the names of the saved models
     * </pre>
     */
    public eu.more2020.visual.domain.GrpcAutoGenerated.Models getModels(eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetModelsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Perform a deletion of a saved model based on the model name
     * Return List of available models after deletion
     * </pre>
     */
    public eu.more2020.visual.domain.GrpcAutoGenerated.Models deleteModel(eu.more2020.visual.domain.GrpcAutoGenerated.ModelName request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteModelMethod(), getCallOptions(), request);
    }
  }

  /**
   * A stub to allow clients to do ListenableFuture-style rpc calls to service RouteGuide.
   */
  public static final class RouteGuideFutureStub
      extends io.grpc.stub.AbstractFutureStub<RouteGuideFutureStub> {
    private RouteGuideFutureStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected RouteGuideFutureStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new RouteGuideFutureStub(channel, callOptions);
    }

    /**
     * <pre>
     * Start training a model
     * Return: Start of training job
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<eu.more2020.visual.domain.GrpcAutoGenerated.Status> startTraining(
        eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getStartTrainingMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Get progress for a specific job 
     * Return: If the job is running, if it is done, or if it has not started yet
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<eu.more2020.visual.domain.GrpcAutoGenerated.Progress> getProgress(
        eu.more2020.visual.domain.GrpcAutoGenerated.JobID request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetProgressMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Get results for a specific target of a job
     * Return: Model evaluation metrics and predictions for the selected target
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<eu.more2020.visual.domain.GrpcAutoGenerated.Results> getSpecificTargetResults(
        eu.more2020.visual.domain.GrpcAutoGenerated.Target request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetSpecificTargetResultsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Get results for all targets of a job
     * Return: Model evaluation metrics and predictions for all targets
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<eu.more2020.visual.domain.GrpcAutoGenerated.AllResults> getAllTargetsResults(
        eu.more2020.visual.domain.GrpcAutoGenerated.JobID request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetAllTargetsResultsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Get inference for a specific timestamp and model
     * Return: Predictions for a specific timestamp
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<eu.more2020.visual.domain.GrpcAutoGenerated.Inference> getInference(
        eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetInferenceMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Save the desired model given the algorithm and the target
     * Return: If information was saved successfully
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<eu.more2020.visual.domain.GrpcAutoGenerated.Status> saveModel(
        eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getSaveModelMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Empty request
     * Return: list of strings with the names of the saved models
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<eu.more2020.visual.domain.GrpcAutoGenerated.Models> getModels(
        eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetModelsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Perform a deletion of a saved model based on the model name
     * Return List of available models after deletion
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<eu.more2020.visual.domain.GrpcAutoGenerated.Models> deleteModel(
        eu.more2020.visual.domain.GrpcAutoGenerated.ModelName request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteModelMethod(), getCallOptions()), request);
    }
  }

  private static final int METHODID_START_TRAINING = 0;
  private static final int METHODID_GET_PROGRESS = 1;
  private static final int METHODID_GET_SPECIFIC_TARGET_RESULTS = 2;
  private static final int METHODID_GET_ALL_TARGETS_RESULTS = 3;
  private static final int METHODID_GET_INFERENCE = 4;
  private static final int METHODID_SAVE_MODEL = 5;
  private static final int METHODID_GET_MODELS = 6;
  private static final int METHODID_DELETE_MODEL = 7;

  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final AsyncService serviceImpl;
    private final int methodId;

    MethodHandlers(AsyncService serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_START_TRAINING:
          serviceImpl.startTraining((eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo) request,
              (io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Status>) responseObserver);
          break;
        case METHODID_GET_PROGRESS:
          serviceImpl.getProgress((eu.more2020.visual.domain.GrpcAutoGenerated.JobID) request,
              (io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Progress>) responseObserver);
          break;
        case METHODID_GET_SPECIFIC_TARGET_RESULTS:
          serviceImpl.getSpecificTargetResults((eu.more2020.visual.domain.GrpcAutoGenerated.Target) request,
              (io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Results>) responseObserver);
          break;
        case METHODID_GET_ALL_TARGETS_RESULTS:
          serviceImpl.getAllTargetsResults((eu.more2020.visual.domain.GrpcAutoGenerated.JobID) request,
              (io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.AllResults>) responseObserver);
          break;
        case METHODID_GET_INFERENCE:
          serviceImpl.getInference((eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp) request,
              (io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Inference>) responseObserver);
          break;
        case METHODID_SAVE_MODEL:
          serviceImpl.saveModel((eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo) request,
              (io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Status>) responseObserver);
          break;
        case METHODID_GET_MODELS:
          serviceImpl.getModels((eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest) request,
              (io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Models>) responseObserver);
          break;
        case METHODID_DELETE_MODEL:
          serviceImpl.deleteModel((eu.more2020.visual.domain.GrpcAutoGenerated.ModelName) request,
              (io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.Models>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }

  public static final io.grpc.ServerServiceDefinition bindService(AsyncService service) {
    return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
        .addMethod(
          getStartTrainingMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              eu.more2020.visual.domain.GrpcAutoGenerated.TrainingInfo,
              eu.more2020.visual.domain.GrpcAutoGenerated.Status>(
                service, METHODID_START_TRAINING)))
        .addMethod(
          getGetProgressMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              eu.more2020.visual.domain.GrpcAutoGenerated.JobID,
              eu.more2020.visual.domain.GrpcAutoGenerated.Progress>(
                service, METHODID_GET_PROGRESS)))
        .addMethod(
          getGetSpecificTargetResultsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              eu.more2020.visual.domain.GrpcAutoGenerated.Target,
              eu.more2020.visual.domain.GrpcAutoGenerated.Results>(
                service, METHODID_GET_SPECIFIC_TARGET_RESULTS)))
        .addMethod(
          getGetAllTargetsResultsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              eu.more2020.visual.domain.GrpcAutoGenerated.JobID,
              eu.more2020.visual.domain.GrpcAutoGenerated.AllResults>(
                service, METHODID_GET_ALL_TARGETS_RESULTS)))
        .addMethod(
          getGetInferenceMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              eu.more2020.visual.domain.GrpcAutoGenerated.Timestamp,
              eu.more2020.visual.domain.GrpcAutoGenerated.Inference>(
                service, METHODID_GET_INFERENCE)))
        .addMethod(
          getSaveModelMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              eu.more2020.visual.domain.GrpcAutoGenerated.ModelInfo,
              eu.more2020.visual.domain.GrpcAutoGenerated.Status>(
                service, METHODID_SAVE_MODEL)))
        .addMethod(
          getGetModelsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              eu.more2020.visual.domain.GrpcAutoGenerated.EmptyRequest,
              eu.more2020.visual.domain.GrpcAutoGenerated.Models>(
                service, METHODID_GET_MODELS)))
        .addMethod(
          getDeleteModelMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              eu.more2020.visual.domain.GrpcAutoGenerated.ModelName,
              eu.more2020.visual.domain.GrpcAutoGenerated.Models>(
                service, METHODID_DELETE_MODEL)))
        .build();
  }

  private static abstract class RouteGuideBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoFileDescriptorSupplier, io.grpc.protobuf.ProtoServiceDescriptorSupplier {
    RouteGuideBaseDescriptorSupplier() {}

    @java.lang.Override
    public com.google.protobuf.Descriptors.FileDescriptor getFileDescriptor() {
      return eu.more2020.visual.domain.GrpcAutoGenerated.GrpcProto.getDescriptor();
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.ServiceDescriptor getServiceDescriptor() {
      return getFileDescriptor().findServiceByName("RouteGuide");
    }
  }

  private static final class RouteGuideFileDescriptorSupplier
      extends RouteGuideBaseDescriptorSupplier {
    RouteGuideFileDescriptorSupplier() {}
  }

  private static final class RouteGuideMethodDescriptorSupplier
      extends RouteGuideBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
    private final java.lang.String methodName;

    RouteGuideMethodDescriptorSupplier(java.lang.String methodName) {
      this.methodName = methodName;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.MethodDescriptor getMethodDescriptor() {
      return getServiceDescriptor().findMethodByName(methodName);
    }
  }

  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;

  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (RouteGuideGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
              .setSchemaDescriptor(new RouteGuideFileDescriptorSupplier())
              .addMethod(getStartTrainingMethod())
              .addMethod(getGetProgressMethod())
              .addMethod(getGetSpecificTargetResultsMethod())
              .addMethod(getGetAllTargetsResultsMethod())
              .addMethod(getGetInferenceMethod())
              .addMethod(getSaveModelMethod())
              .addMethod(getGetModelsMethod())
              .addMethod(getDeleteModelMethod())
              .build();
        }
      }
    }
    return result;
  }
}
