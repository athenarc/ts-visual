package eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting;

import static io.grpc.MethodDescriptor.generateFullMethodName;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler (version 1.58.0)",
    comments = "Source: athForecasting.proto")
@io.grpc.stub.annotations.GrpcGenerated
public final class Csv_ServiceGrpc {

  private Csv_ServiceGrpc() {}

  public static final java.lang.String SERVICE_NAME = "csv_service.Csv_Service";

  // Static method descriptors that strictly reflect the proto.
  private static volatile io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest,
      eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse> getHandleDataMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "HandleData",
      requestType = eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest.class,
      responseType = eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest,
      eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse> getHandleDataMethod() {
    io.grpc.MethodDescriptor<eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest, eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse> getHandleDataMethod;
    if ((getHandleDataMethod = Csv_ServiceGrpc.getHandleDataMethod) == null) {
      synchronized (Csv_ServiceGrpc.class) {
        if ((getHandleDataMethod = Csv_ServiceGrpc.getHandleDataMethod) == null) {
          Csv_ServiceGrpc.getHandleDataMethod = getHandleDataMethod =
              io.grpc.MethodDescriptor.<eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest, eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "HandleData"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse.getDefaultInstance()))
              .setSchemaDescriptor(new Csv_ServiceMethodDescriptorSupplier("HandleData"))
              .build();
        }
      }
    }
    return getHandleDataMethod;
  }

  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static Csv_ServiceStub newStub(io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<Csv_ServiceStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<Csv_ServiceStub>() {
        @java.lang.Override
        public Csv_ServiceStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new Csv_ServiceStub(channel, callOptions);
        }
      };
    return Csv_ServiceStub.newStub(factory, channel);
  }

  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static Csv_ServiceBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<Csv_ServiceBlockingStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<Csv_ServiceBlockingStub>() {
        @java.lang.Override
        public Csv_ServiceBlockingStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new Csv_ServiceBlockingStub(channel, callOptions);
        }
      };
    return Csv_ServiceBlockingStub.newStub(factory, channel);
  }

  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static Csv_ServiceFutureStub newFutureStub(
      io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<Csv_ServiceFutureStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<Csv_ServiceFutureStub>() {
        @java.lang.Override
        public Csv_ServiceFutureStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new Csv_ServiceFutureStub(channel, callOptions);
        }
      };
    return Csv_ServiceFutureStub.newStub(factory, channel);
  }

  /**
   */
  public interface AsyncService {

    /**
     */
    default void handleData(eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getHandleDataMethod(), responseObserver);
    }
  }

  /**
   * Base class for the server implementation of the service Csv_Service.
   */
  public static abstract class Csv_ServiceImplBase
      implements io.grpc.BindableService, AsyncService {

    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return Csv_ServiceGrpc.bindService(this);
    }
  }

  /**
   * A stub to allow clients to do asynchronous rpc calls to service Csv_Service.
   */
  public static final class Csv_ServiceStub
      extends io.grpc.stub.AbstractAsyncStub<Csv_ServiceStub> {
    private Csv_ServiceStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected Csv_ServiceStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new Csv_ServiceStub(channel, callOptions);
    }

    /**
     */
    public void handleData(eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest request,
        io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getHandleDataMethod(), getCallOptions()), request, responseObserver);
    }
  }

  /**
   * A stub to allow clients to do synchronous rpc calls to service Csv_Service.
   */
  public static final class Csv_ServiceBlockingStub
      extends io.grpc.stub.AbstractBlockingStub<Csv_ServiceBlockingStub> {
    private Csv_ServiceBlockingStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected Csv_ServiceBlockingStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new Csv_ServiceBlockingStub(channel, callOptions);
    }

    /**
     */
    public eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse handleData(eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getHandleDataMethod(), getCallOptions(), request);
    }
  }

  /**
   * A stub to allow clients to do ListenableFuture-style rpc calls to service Csv_Service.
   */
  public static final class Csv_ServiceFutureStub
      extends io.grpc.stub.AbstractFutureStub<Csv_ServiceFutureStub> {
    private Csv_ServiceFutureStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected Csv_ServiceFutureStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new Csv_ServiceFutureStub(channel, callOptions);
    }

    /**
     */
    public com.google.common.util.concurrent.ListenableFuture<eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse> handleData(
        eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getHandleDataMethod(), getCallOptions()), request);
    }
  }

  private static final int METHODID_HANDLE_DATA = 0;

  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final AsyncService serviceImpl;
    private final int methodId;

    MethodHandlers(AsyncService serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_HANDLE_DATA:
          serviceImpl.handleData((eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest) request,
              (io.grpc.stub.StreamObserver<eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }

  public static final io.grpc.ServerServiceDefinition bindService(AsyncService service) {
    return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
        .addMethod(
          getHandleDataMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest,
              eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse>(
                service, METHODID_HANDLE_DATA)))
        .build();
  }

  private static abstract class Csv_ServiceBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoFileDescriptorSupplier, io.grpc.protobuf.ProtoServiceDescriptorSupplier {
    Csv_ServiceBaseDescriptorSupplier() {}

    @java.lang.Override
    public com.google.protobuf.Descriptors.FileDescriptor getFileDescriptor() {
      return eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.AthForecasting.getDescriptor();
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.ServiceDescriptor getServiceDescriptor() {
      return getFileDescriptor().findServiceByName("Csv_Service");
    }
  }

  private static final class Csv_ServiceFileDescriptorSupplier
      extends Csv_ServiceBaseDescriptorSupplier {
    Csv_ServiceFileDescriptorSupplier() {}
  }

  private static final class Csv_ServiceMethodDescriptorSupplier
      extends Csv_ServiceBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
    private final java.lang.String methodName;

    Csv_ServiceMethodDescriptorSupplier(java.lang.String methodName) {
      this.methodName = methodName;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.MethodDescriptor getMethodDescriptor() {
      return getServiceDescriptor().findMethodByName(methodName);
    }
  }

  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;

  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (Csv_ServiceGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
              .setSchemaDescriptor(new Csv_ServiceFileDescriptorSupplier())
              .addMethod(getHandleDataMethod())
              .build();
        }
      }
    }
    return result;
  }
}
