package eu.more2020.visual.service.forecasting;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.util.JsonFormat;

import eu.more2020.visual.domain.Forecasting.Grpc.HandleDataReq;
import eu.more2020.visual.domain.Forecasting.Grpc.HandleDataRes;
import eu.more2020.visual.domain.Forecasting.Grpc.InferenceRes;
import eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataRequest;
import eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.HandleDataResponse;
import eu.more2020.visual.domain.GrpcAutoGenerated.AthenaForecasting.Csv_ServiceGrpc;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

@Service
public class ForecastingAthenaImpl extends Csv_ServiceGrpc.Csv_ServiceImplBase {

    public HandleDataRes ForecastingAthenaInference (HandleDataReq req) throws InvalidProtocolBufferException, JsonProcessingException {
        HandleDataRequest request = HandleDataRequest.newBuilder()
                .setDataId(req.getData_id())
                .setStartDate(req.getStart_date())
                .setEndDate(req.getEnd_date())
                .setUseCaseId(req.getUse_case_id())
                .build();

        // Create a channel to connect to the target gRPC server
        ManagedChannel channel = ManagedChannelBuilder.forAddress("83.212.75.52", 50059)
                .usePlaintext()
                .build();

        // Create a stub using the generated code and the channel
        Csv_ServiceGrpc.Csv_ServiceBlockingStub stub = Csv_ServiceGrpc.newBlockingStub(channel);

        // Invoke the remote method on the target server
        HandleDataResponse response = stub.handleData(request);
        // Convert the response to JSON string
        String json = JsonFormat.printer().print(response);

        // Create an ObjectMapper
        ObjectMapper objectMapper = new ObjectMapper();

        // Deserialize the JSON string into a Response object
        HandleDataRes responseObject = objectMapper.readValue(json, HandleDataRes.class);

        // Shutdown the channel
        channel.shutdown();

        return responseObject;
    }
}
