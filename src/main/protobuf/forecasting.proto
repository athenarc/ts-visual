syntax = "proto3";

option java_multiple_files = true;
option java_package = "eu.more2020.visual.domain.GrpcAutoGenerated";
option java_outer_classname = "GrpcProto";

service RouteGuide {
  // Start training a model
  // Return: Start of training job
  rpc StartTraining(TrainingInfo) returns (Status) {}

  // Get progress for a specific job 
  // Return: If the job is running, if it is done, or if it has not started yet
  rpc GetProgress(JobID) returns (Progress) {}

  // Get results for a specific target of a job
  // Return: Model evaluation metrics and predictions for the selected target
  rpc GetSpecificTargetResults(Target) returns (Results) {}

  // Get results for all targets of a job
  // Return: Model evaluation metrics and predictions for all targets
  rpc GetAllTargetsResults(JobID) returns (AllResults) {}

  // Get inference for a specific timestamp and model
  // Return: Predictions for a specific timestamp
  rpc GetInference(Timestamp) returns (Inference) {}

  // Save the desired model given the algorithm and the target
  // Return: If information was saved successfully
  rpc SaveModel(ModelInfo) returns (Status) {}

  // Empty request
  // Return: list of strings with the names of the saved models
  rpc GetModels(EmptyRequest) returns (Models);

  // Perform a deletion of a saved model based on the model name
  // Return List of available models after deletion
  rpc DeleteModel(ModelName) returns (Models);
}

message EmptyRequest {}

message Models {
  repeated string models = 1;
}

message ModelName {
  string modelName = 1;
}

message TrainingInfo {
  string id = 1;
  string config = 2;
  string host = 3;
  string port = 4;
  string username = 5;
  string password = 6;
  string databaseName = 7;
}

message Target {
  string name = 1;
  string id = 2;
}

message Status {
  string id = 1;
  string status = 2;
}

message JobID {
  string id = 1;
}

message Timestamp {
  int64 timestamp = 1;
  string model_name = 2;
  string kind = 3;
  string host = 4;
  string port = 5;
  string username= 6;
  string password = 7;
  string databaseName = 8;
}

message Progress {
  string id = 1;
  map<string, string> data = 2;
}

message Predictions {
  //  timestamp -> prediction
  map<string, float> predictions = 1;
  map<string, float> evaluation = 2;
}

message Results {
  string target = 1; 
  // string = model name
  map<string, Predictions> metrics = 2;
}

message AllResults {
  repeated Results results = 1;
}

message Inference {
  map<string, float> predictions = 1;
}

message ModelInfo {
  string model_type = 1;
  string model_name = 2;
  string target = 3;
}